{"version":3,"sources":["StopWatchApp.module.css","StopWatchApp.jsx","index.js"],"names":["module","exports","StopWatchApp","useState","time","setTime","isGoing","setIsGoing","timer$","interval","useEffect","startApp","pipe","startWith","scan","share","subscribe","i","unsubscribe","onClick","button","start","className","s","App","Date","toISOString","substr","showTime","ButtonGroup","btnGroup","size","color","aria-label","Button","onDoubleClick","timer","first","ReactDOM","render","document","getElementById"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,IAAM,0BAA0B,SAAW,iC,oKCmF9CC,EAxEM,WAAO,IAAD,EAEFC,mBAAS,GAFP,mBAEnBC,EAFmB,KAEbC,EAFa,OAGIF,oBAAS,GAHb,mBAGnBG,EAHmB,KAGVC,EAHU,KAKtBC,EAASC,YAAS,KACtBC,qBAAU,WAET,IAAIC,EAAWH,EACbI,KACAC,YAAUT,GACVU,aAAK,SAAAV,GAAI,OAAIA,EAAO,KACpBW,eAEAC,WAAU,SAAAC,GAETX,GAAWD,EAAQY,MAItB,OAAO,kBAAMN,EAASO,iBACpB,CAACZ,EAASF,EAAMI,IAGnB,IAAMW,EAAU,SAAAC,GACf,IAAMC,EAAQf,EACC,UAAXc,EACHb,GAAYc,GACS,SAAXD,IACVf,EAAQ,GACRE,GAAYc,KAoBd,OACC,sBAAKC,UAAaC,IAAEC,IAApB,UACC,qBAAKF,UAAY,iBAAjB,SANe,SAAAlB,GAAI,OAAI,IAAIqB,KAAY,IAAPrB,GAChCsB,cACAC,OAAO,GAAI,GAKTC,CAASxB,KAEX,eAACyB,EAAA,EAAD,CAAaP,UAAaC,IAAEO,SACfC,KAAO,QACPC,MAAQ,UACRC,aAAa,uCAH1B,UAIC,cAACC,EAAA,EAAD,CAAQf,QACPb,EAAU,kBAAMa,EAAQ,SAAU,kBAAMA,EAAQ,UADjD,SAGEb,EAAU,OAAS,UAErB,cAAC4B,EAAA,EAAD,CAAQC,cAzBO,WACGC,YAAM,KACdxB,KAAKyB,eAASrB,WAAU,WACnCT,GAAW,OAsBV,kBACA,cAAC2B,EAAA,EAAD,CAAQf,QA/BQ,WAClBZ,GAAW,GACXF,EAAQ,IA6BN,0BCzEJiC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.f017b75e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"StopWatchApp_App__2baXE\",\"btnGroup\":\"StopWatchApp_btnGroup__1PL5l\"};","import {useEffect, useState} from 'react'\nimport Button from \"@material-ui/core/Button\"\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\"\nimport {timer, interval} from 'rxjs'\nimport {\n\tfirst,\n\tstartWith,\n\tscan,\n\tshare\n} from 'rxjs/operators'\nimport s from './StopWatchApp.module.css'\n\nconst StopWatchApp = () => {\n\n\tconst [time, setTime] = useState(0)\n\tconst [isGoing, setIsGoing] = useState(false)\n\n\tlet timer$ = interval(1000)\n\tuseEffect(() => {\n\n\t\tlet startApp = timer$\n\t\t\t.pipe(\n\t\t\t\tstartWith(time),\n\t\t\t\tscan(time => time + 1),\n\t\t\t\tshare(),\n\t\t\t)\n\t\t\t.subscribe(i => {\n\t\t\t\t{\n\t\t\t\t\tisGoing && setTime(i)\n\t\t\t\t}\n\t\t\t})\n\n\t\treturn () => startApp.unsubscribe()\n\t}, [isGoing, time, timer$])\n\n\t// handleClickers for START/STOP\n\tconst onClick = button => {\n\t\tconst start = isGoing;\n\t\tif (button === 'Start') {\n\t\t\tsetIsGoing(!start)\n\t\t} else if (button === 'Stop') {\n\t\t\tsetTime(0)\n\t\t\tsetIsGoing(!start)\n\t\t}\n\t}\n\t// handleClickers for RESET\n\tconst resetClick = () => {\n\t\tsetIsGoing(true)\n\t\tsetTime(0)\n\t}\n\t// handleClickers for WAIT\n\tconst waitClick = () => {\n\t\tconst doubleClick = timer(300);\n\t\tdoubleClick.pipe(first()).subscribe(() => {\n\t\t\tsetIsGoing(false)\n\t\t})\n\t}\n\t// shows HH:MM:SS\n\tconst showTime = time => new Date(time * 1000)\n\t\t.toISOString()\n\t\t.substr(11, 8)\n\n\treturn (\n\t\t<div className = {s.App}>\n\t\t\t<div className = 'displayWrapper'>\n\t\t\t\t{showTime(time)}\n\t\t\t</div>\n\t\t\t<ButtonGroup className = {s.btnGroup}\n\t\t\t             size = 'large'\n\t\t\t             color = 'primary'\n\t\t\t             aria-label = 'large contained primary button group'>\n\t\t\t\t<Button onClick = {\n\t\t\t\t\tisGoing ? () => onClick('Stop') : () => onClick('Start')\n\t\t\t\t}>\n\t\t\t\t\t{isGoing ? 'Stop' : 'Start'}\n\t\t\t\t</Button>\n\t\t\t\t<Button onDoubleClick = {waitClick}>Wait</Button>\n\t\t\t\t<Button onClick = {resetClick}>Reset</Button>\n\t\t\t</ButtonGroup>\n\n\t\t</div>\n\t)\n}\n\nexport default StopWatchApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport StopWatchApp from './StopWatchApp';\n\nReactDOM.render(<StopWatchApp />, document.getElementById('root'))"],"sourceRoot":""}